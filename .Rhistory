install.packages("ggplot2")
install.packages("BaM")
install.packages("git2r")
library(git2r)
pnorm(100, mean=110.39, sd=sqrt(69.23))
pnorm(100, mean=110.39, sd=sqrt(69.23))
1- pnorm(100, mean=110.39, sd=sqrt(69.23))
pnorm(100, mean=110.39, sd=sqrt(69.23))
1- pnorm(100, mean=110.39, sd=sqrt(69.23))
( pnorm(100, mean=110.39, sd=sqrt(69.23)))/(1- pnorm(100, mean=110.39, sd=sqrt(69.23)))
dunif(-1,1)
dunif(1,-1,1)
dunif(2,-1,1)
p1<- pnorm(100, mean=110.39, sd=sqrt(69.23))
p2<-1- pnorm(100, mean=110.39, sd=sqrt(69.23))
bayesfactor<-p1/p2
p1
p2
bayesfactor
p1<- pnorm(100, mean=110.39, sd=sqrt(69.23))
p2<-1- pnorm(100, mean=110.39, sd=sqrt(69.23))
bayesfactor<-p1/p2
p1
p2
bayesfactor
# generating data
u <- matrix(rep(NA, 250), nrow=50)
for (i in 1:50)
{
u[i,1:5] <- rnorm(5, 0, 1)
}
b <- matrix(rnorm(250, 3, 1), nrow=50)
e <- matrix(rnorm(250, 0, 1), nrow=50)
y <- u + b + e
# modeling
require(runjags)
require(coda)
K <- nrow(y)
J <- ncol(y)
casella.data <- dump.format(list(y=y, K=K, J=J))
casella.inits <- dump.format(list(beta=1, sige=1,
sigma=1))
casella.improper.model <- "model {
for (i in 1:K) {
for (j in 1:J) {
y[i,j] ~ dnorm(mu[i,j], sige)
mu[i,j] <- beta + u[i]
}
u[i] ~ dnorm(0, sigma)
}
beta ~ dunif(-10000, 10000)
sige ~ dunif(-10000, 10000)
sigma ~ dunif(-10000, 10000)
}"
casella.improper1 <- run.jags(model=casella.improper.model, data=casella.data, inits=casella.inits, n.chain=1, burnin=1000,
sample=5000, monitor=c("beta", "sige", "sigma"))
install.packages("runjags")
# generating data
u <- matrix(rep(NA, 250), nrow=50)
for (i in 1:50)
{
u[i,1:5] <- rnorm(5, 0, 1)
}
b <- matrix(rnorm(250, 3, 1), nrow=50)
e <- matrix(rnorm(250, 0, 1), nrow=50)
y <- u + b + e
# modeling
require(runjags)
require(coda)
K <- nrow(y)
J <- ncol(y)
casella.data <- dump.format(list(y=y, K=K, J=J))
casella.inits <- dump.format(list(beta=1, sige=1,
sigma=1))
casella.improper.model <- "model {
for (i in 1:K) {
for (j in 1:J) {
y[i,j] ~ dnorm(mu[i,j], sige)
mu[i,j] <- beta + u[i]
}
u[i] ~ dnorm(0, sigma)
}
beta ~ dunif(-10000, 10000)
sige ~ dunif(-10000, 10000)
sigma ~ dunif(-10000, 10000)
}"
casella.improper1 <- run.jags(model=casella.improper.model, data=casella.data, inits=casella.inits, n.chain=1, burnin=1000,
sample=5000, monitor=c("beta", "sige", "sigma"))
# generating data
u <- matrix(rep(NA, 250), nrow=50)
for (i in 1:50)
{
u[i,1:5] <- rnorm(5, 0, 1)
}
b <- matrix(rnorm(250, 3, 1), nrow=50)
e <- matrix(rnorm(250, 0, 1), nrow=50)
y <- u + b + e
# modeling
require(runjags)
require(coda)
K <- nrow(y)
J <- ncol(y)
casella.data <- dump.format(list(y=y, K=K, J=J))
casella.inits <- dump.format(list(beta=1, sige=1,
sigma=1))
casella.improper.model <- "model {
for (i in 1:K) {
for (j in 1:J) {
y[i,j] ~ dnorm(mu[i,j], sige)
mu[i,j] <- beta + u[i]
}
u[i] ~ dnorm(0, sigma)
}
beta ~ dunif(-10000, 10000)
sige ~ dunif(-10000, 10000)
sigma ~ dunif(-10000, 10000)
}"
casella.improper1 <- run.jags(model=casella.improper.model, data=casella.data, inits=casella.inits, n.chain=1, burnin=1000,
sample=5000, monitor=c("beta", "sige", "sigma"))
install.packages("rjags")
library(rjags)
# generating data
u <- matrix(rep(NA, 250), nrow=50)
for (i in 1:50)
{
u[i,1:5] <- rnorm(5, 0, 1)
}
b <- matrix(rnorm(250, 3, 1), nrow=50)
e <- matrix(rnorm(250, 0, 1), nrow=50)
y <- u + b + e
# modeling
require(runjags)
require(coda)
K <- nrow(y)
J <- ncol(y)
casella.data <- dump.format(list(y=y, K=K, J=J))
casella.inits <- dump.format(list(beta=1, sige=1,
sigma=1))
casella.improper.model <- "model {
for (i in 1:K) {
for (j in 1:J) {
y[i,j] ~ dnorm(mu[i,j], sige)
mu[i,j] <- beta + u[i]
}
u[i] ~ dnorm(0, sigma)
}
beta ~ dunif(-10000, 10000)
sige ~ dunif(-10000, 10000)
sigma ~ dunif(-10000, 10000)
}"
casella.improper1 <- run.jags(model=casella.improper.model, data=casella.data, inits=casella.inits, n.chain=1, burnin=1000,
sample=5000, monitor=c("beta", "sige", "sigma"))
casella.improper2 <- run.jags(model=casella.improper.model, data=casella.data, inits=casella.inits, n.chain=1, burnin=10000,
sample=20000, monitor=c("beta", "sige", "sigma"))
casella.proper.model <- "model {
for (i in 1:K) {
for (j in 1:J) {
y[i,j] ~ dnorm(mu[i,j], sige)
mu[i,j] <- beta + u[i]
}
u[i] ~ dnorm(0, sigma)
}
beta ~ dnorm(2, 1)
sige ~ dgamma(.5, 1)
sigma ~ dgamma(.5, 1)
}"
casella.proper <- run.jags(model=casella.proper.model, data=casella.data, inits=casella.inits, n.chain=1, burnin=1000, sample=5000, monitor=c("beta", "sige", "sigma"))
par(mfrow=c(3,3))
traceplot(casella.improper1$mcmc[[1]][,1], main="beta (short run)", ylim=c(2.2, 3.5))
traceplot(casella.improper2$mcmc[[1]][,1], main="beta (long run)", ylim=c(2.2, 3.5))
traceplot(casella.proper$mcmc[[1]][,1], main="beta (proper prior, short)", ylim=c(2.2, 3.5))
traceplot(casella.improper1$mcmc[[1]][,2], main="sigma_e (short run)", ylim=c(.2, .5))
traceplot(casella.improper2$mcmc[[1]][,2], main="sigma_e (long run)", ylim=c(.2, .5))
traceplot(casella.proper$mcmc[[1]][,2], main="sigma_e (proper prior, short run)", ylim=c(.2, .5))
traceplot(casella.improper1$mcmc[[1]][,3], main="sigma (short run)", ylim=c(0, 10000))
traceplot(casella.improper2$mcmc[[1]][,3], main="sigma (long run)", ylim=c(0, 10000))
traceplot(casella.proper$mcmc[[1]][,3], main="sigma (proper prior, short run)", ylim=c(0, 15))
summary(casella.improper1$mcmc[[1]])
summary(casella.improper2$mcmc[[1]])
summary(casella.proper$mcmc[[1]])
tinytex::install_tinytex()
library(tinytex)
detach("package:tinytex", unload = TRUE)
library(tinytex)
library(tinytex)
devtools::install_github("AU-R-Programming/FinalProject_Group7/group7project")
require(BaM)
South <- read.csv("BMI.South.csv")
NonSouth <- read.csv("BMI.nonSouth.csv")
# calculating the standard difference of means test statistic
n1 <- length(South[ ,2])
n2 <- length(NonSouth[ ,2])
f <- n1+n2-2
nd <- 1/(1/n1 +1/n2)
x1 <- mean(South[ ,2])
x2 <- mean(NonSouth[ ,2])
s1 <- var(South[ ,2])
s2 <- var(NonSouth[ ,2])
t <- sqrt(nd)*(x1-x2)/sqrt(((n1-1)*s1+(n2-1)*s2)/(n1+n2-2))
# Bayes factor for H0 versus H1:
d <- 0.1
sd <- 0.05
pv <- sqrt(1+(nd*sd))
ncp1 <- d*sqrt(nd)/pv
T1 <- pt(t, df=f, ncp=0)
T2 <- pt(t, df=f, ncp= ncp1)
Bayes_factor <- T1/T2
Bayes_factor
View(South)
d<-cars
View(d)
View(d)
library(group7project)
dim(d)
is.matrix(d)
is,data.frame(d)
is.data.frame(d)
d[1,]
d[,1:dim(d)[2]]
d[,2]
lin_reg(d[,2],d[,1])
detach("package:group7project", unload = TRUE)
library(group7project)
remove.packages("group7project", lib="~/R/R-4.1.2/library")
devtools::install_github("AU-R-Programming/FinalProject_Group7/group7project")
devtools::install_github("AU-R-Programming/FinalProject_Group7/group7project")
x <- faithful[, 2]
hist(x)
par(mfrow = c(1,2))
# Histogram with 9 bins
bins <- seq(min(x), max(x), length.out = 10)
hist(x, breaks = bins)
hist(x, breaks = bins)
par(mfrow = c(1,2))
# Histogram with 9 bins
bins <- seq(min(x), max(x), length.out = 10)
hist(x, breaks = bins)
# Histogram with 9 bins
bins <- seq(min(x), max(x), length.out = 10)
hist(x, breaks = bins)
par(mfrow = c(1,2))
# Histogram with 9 bins
bins <- seq(min(x), max(x), length.out = 10)
hist(x, breaks = bins)
# Histogram with 19 bins
bins <- seq(min(x), max(x), length.out = 20)
hist(x, breaks = bins)
input <- 10
# Histogram with input bins
bins <- seq(min(x), max(x), length.out = input + 1)
hist(x, breaks = bins)
shiny::runApp('App2')
runApp('App2')
runApp('App2')
runApp('Apa1')
runApp('Apa1')
runApp('Apa1')
library(usethis)
?lin_reg
??lin_reg
setwd("~/GitHub/FinalProject_Group7")
